//1. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤–∏—Ç—á –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö, —Å–æ–≥–ª–∞—Å–Ω—ã—Ö, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤.
//2. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–∏—Ç—á –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
//3. –£ –≤–∞—Å –µ—Å—Ç—å –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã). –ò–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ê –∏–ª–∏ –û, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –í –∏–ª–∏ –î, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤—É, –µ—Å–ª–∏ –∂–µ –æ–ø—è—Ç—å –Ω–µ—Ç, —Ç–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ï –∏–ª–∏ –ó, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–º–∏–ª–∏–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏.
//4. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–∏ –∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ 10–•10 (–º–æ–∂–Ω–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–∏—Ç—á, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ—Ç —Ç—é–ø–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π –∏ –≤—ã–¥–∞—Å—Ç –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –º–∏–º–æ, —Ä–∞–Ω–∏–ª, —É–±–∏–ª.



print("TASK-1")
//1. –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤–∏—Ç—á –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö, —Å–æ–≥–ª–∞—Å–Ω—ã—Ö, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤.
let strText    = "AUEIUOASDGHFHVSAGDVFKHJSGDGFHJSADHFJVBASDHJVFHGSADVGFYUBSYBFYSABFDJ"
let strGlasn   = "AEIOU"
let strSogl    = "BCDFGHJKLMNPQRSTVWXYZ"

var sumGlasn = 0     // —Å—É–º–º–∞ –≥–ª–∞—Å–Ω—ã—Ö
var sumSogl  = 0     // —Å—É–º–º–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö

var indexStrText = 0 // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

// #1 switch
for each in strText {

    for eachSogl in strSogl {                               // —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö
        
        switch (each, eachSogl) {
//        case (each, eachSogl) where each == eachSogl :
        case (eachSogl, each):      // refactoring –≤—ã—à–µ —Å—Ç—Ä–æ—á–∫–∏!
            sumSogl += 1
        default:
            break
        }
        
    }
    
    for eachGlasn in strGlasn {                             // —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –≥–ª–∞—Å–Ω—ã—Ö
        
        switch (each, eachGlasn) {
//        case (each, eachGlasn) where each == eachGlasn :
        case (eachGlasn, each):     // refactoring –≤—ã—à–µ —Å—Ç—Ä–æ—á–∫–∏!
            sumGlasn += 1
        default:
            break
        }
        
    }
    
    indexStrText += 1                                       // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    if indexStrText == strText.count {                      // —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("–°—á–∏—Ç–∞–µ–º –≥–ª–∞—Å–Ω—ã–µ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ:\n\(strText)\n\n–í–∞—Ä–∏–∞–Ω—Ç Switch #1")
        print("–°—É–º–º–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö: \(sumSogl)")
        print("–°—É–º–º–∞ –≥–ª–∞—Å–Ω—ã—Ö  : \(sumGlasn)")
    }
}

// #2 switch
sumGlasn = 0
sumSogl = 0
indexStrText = 0

for eachText in strText {

    switch eachText {
    case "A", "E", "I", "O", "U" :
        sumGlasn += 1
    case "B", "C", "D", "F", "G", "H", "J", "K", "L", "M", "N", "P", "Q", "R", "S", "T", "V", "W", "X", "Y", "Z" :
        sumSogl += 1
    default:
        break
    }
    
    indexStrText += 1
    
    if indexStrText == strText.count {
        print("\n–í–∞—Ä–∏–∞–Ω—Ç Switch #2")
        print("–°—É–º–º–∞ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö: \(sumSogl)")
        print("–°—É–º–º–∞ –≥–ª–∞—Å–Ω—ã—Ö  : \(sumGlasn)")
    }

}



print("\nTASK-2")
//2. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–∏—Ç—á –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
let agePerson = 29

print("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç \(agePerson)")

switch agePerson {
case 0...16:
    print("")
    print("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å - School boy")
case 17...21:
    print("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å - Teenagers")
case 22...30:
    print("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å - Boy")
case 31...50:
    print("–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å - Man")
case 51...95:
    print("–í—ã –±–ª–∏–∑–∫–∏ –∫ –ë–æ—Ä–æ–≤–∏—Ü–∫–æ–π –°–æ–Ω–∏!! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å üíû")
default:
    print("–í—ã –æ–±–º–∞–Ω—â–∏–∫!")
    break
}



print("\nTASK-3")
//3. –£ –≤–∞—Å –µ—Å—Ç—å –∏–º—è –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã). –ò–º—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ê –∏–ª–∏ –û, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –∂–µ –Ω–µ—Ç, —Ç–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ—Ç—á–µ—Å—Ç–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –í –∏–ª–∏ –î, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É –ø–æ –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤—É, –µ—Å–ª–∏ –∂–µ –æ–ø—è—Ç—å –Ω–µ—Ç, —Ç–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ñ–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ï –∏–ª–∏ –ó, —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–º–∏–ª–∏–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–µ–º—É –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏.
let tupleStudent = [(name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", fullName: "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á"), (name: "–õ–µ–≤", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", fullName: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"), (name: "–î–∞—Ä—å—è", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è", fullName: "–û–ª–µ–≥–æ–≤–Ω–∞")]


for each in tupleStudent {
    
    switch each {
    case (let name,_,_) where name.hasPrefix("–ê"): // –µ—â–µ –≤–æ—Ç —Ç–∞–∫ –≤–æ—Ç –º–æ–∂–Ω–æ!!
        print("–ü—Ä–∏–≤–µ—Ç, \(each.name)")
//    case _ where each.name.hasPrefix("–ê"): 
//        print("–ü—Ä–∏–≤–µ—Ç, \(each.name)")
    case _ where each.fullName.hasPrefix("–ê"):
        print("–ü—Ä–∏–≤–µ—Ç, \(each.name) \(each.fullName)")
    case _ where each.fullName.hasPrefix("–û"):
        print("–ü—Ä–∏–≤–µ—Ç, \(each.name) \(each.fullName) \(each.surName)")
    default:
        break
    }
    
}


/*
let personName = ["lastName" : "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", "name" : "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "secondName" : "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á"]

for bukva in personName["name"]! {
    switch bukva {
    case "–ê", "–û" :
        print("Hello \(personName["name"]!)")
    default:
        break
    }
}

// 3.1
let persoName_2 = (lastName : "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", name : "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", secondName : "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á")

switch persoName_2 {
case _ where persoName_2.name.hasPrefix("–ê") || persoName_2.name.hasPrefix("–û"):
    print("Hello, \(persoName_2.name)")
case _ where persoName_2.secondName.hasPrefix("–í") || persoName_2.secondName.hasPrefix("–î"):
    print("Helo, \(persoName_2.name) \(persoName_2.secondName)")
case _ where persoName_2.lastName.hasPrefix("–ï") || persoName_2.lastName.hasPrefix("–ó"):
    print("Helo, \(persoName_2.lastName)")
default:
    break
}
// 3.2
print("–ó–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤ (–ë–æ–ª—å—à–æ–π –∫–æ–¥!\n)")
let arrTupleStudent = [(name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", fullName: "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á"), (name: "–õ–µ–≤", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∏–π", fullName: "–ï–≤–≥–µ–Ω—å–µ–≤–∏—á"), (name: "–î–∞—Ä—å—è", surName: "–ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è", fullName: "–û–ª–µ–≥–æ–≤–Ω–∞")]

var indexArrTuple = 0
for each in arrTupleStudent {

 if each.name.hasPrefix("–ê") || each.name.hasPrefix("–õ") {
     print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ \(arrTupleStudent[indexArrTuple].name)")
 }
 indexArrTuple += 1
}

indexArrTuple = 0

for each in arrTupleStudent {

 for each in each.name {

     switch each {
     case "–ê":
         print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç - \(arrTupleStudent[indexArrTuple].name)")
     case "–õ":
         print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç - \(arrTupleStudent[indexArrTuple].name)")
     default:
         break
     }

 }

 for each in each.fullName {
     
     switch each {
     case "–ï":
         print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç - \(arrTupleStudent[indexArrTuple].name) \(arrTupleStudent[indexArrTuple].fullName)")
     case "–û":
         print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç - \(arrTupleStudent[indexArrTuple].name) \(arrTupleStudent[indexArrTuple].fullName)")
     default:
         break
     }
 }
 
 indexArrTuple += 1
}
*/


print("\nTASK-4")
// 4. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ –º–æ—Ä—Å–∫–æ–π –±–æ–∏ –∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –ø–æ–ª–µ 10–•10 (–º–æ–∂–Ω–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã). –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–∏—Ç—á, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–º–µ—Ç —Ç—é–ø–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π –∏ –≤—ã–¥–∞—Å—Ç –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –º–∏–º–æ, —Ä–∞–Ω–∏–ª, —É–±–∏–ª.
let ship1 = [
    (x:3, y:1),
    (x:4, y:1),
    (x:5, y:1),
    (x:6, y:1)]

let ship2 = [
    (x:2, y:3),
    (x:2, y:4)]

// –≤—ã—Å—Ç—Ä–µ–ª—ã –∏–≥—Ä–æ–∫–∞
let playerTurns = [
    (x:2, y:3),
    (x:2, y:7),
    (x:2, y:4),
    (x:8, y:3),
    (x:3, y:1),
    (x:4, y:1),
    (x:5, y:1),
    (x:6, y:1)]

// –º–∞—Å—Å–∏–≤ —Å –∫–æ—Ä–æ–±–ª—è–º–∏
let gameBoard = [ship1, ship2]


for ship in gameBoard {     // –≤—ã–≤–æ–¥ —Å–∞–º–æ–≥–æ –∫–æ—Ä–æ–±–ª—è
    
    var shipDestroed = 0    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –∫–æ—Ä–æ–±–ª—è
    var missShot = 0        // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ø—Ä–æ–º–∞—Ö –∫–æ—Ä–æ–±–ª—è
    
    for shipPosition in ship {      // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –∫–æ—Ä–æ–±–ª—è
        
        for hit in playerTurns {    // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≤—ã—Å—Ç—Ä–µ–ª–∞–º –∏–≥—Ä–æ–∫–∞
            // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–æ—Ä–æ–±–ª—è
            switch (hit.x, hit.y) {
            case (shipPosition.x, shipPosition.y):
                print("–ü–æ–ø–∞–ª x: \(hit.x), y: \(hit.y)")
                // —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ –∫–æ—Ä–æ–±–ª—è
                shipDestroed += 1
                shipDestroed == ship.count ? print("–£–±–∏–ª \(ship)") : nil
            default:
                // —É—Å–ª–æ–≤–∏–µ –≤—ã–≤–æ–¥–∞ –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ–º–∞—Ö–∞
                missShot == 0 ? print("\n–ü—Ä–æ–º–∞—Ö x: \(hit.x), y: \(hit.y)\n") : nil
                missShot += 1
                break
            }
        }
    }
}

/* –†–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –±–µ–∑ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–¥–∞!
// –≤—ã–≤–æ–¥ —Å–∞–º–æ–≥–æ –∫–æ—Ä–æ–±–ª—è
for ship in gameBoard {

    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —É–±–∏–π—Å—Ç–≤–æ –∫–æ—Ä–æ–±–ª—è
    var shipDestroed = 0
    // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –ø—Ä–æ–º–∞—Ö –∫–æ—Ä–æ–±–ª—è
    var missShot = 0

    // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –∫–æ—Ä–æ–±–ª—è
    for shipPosition in ship {

        // –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –≤—ã—Å—Ç—Ä–µ–ª–∞–º –∏–≥—Ä–æ–∫–∞
        for hit in playerTurns {

            // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—Å—Ç—Ä–µ–ª –∏–≥—Ä–æ–∫–∞ —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–æ—Ä–æ–±–ª—è
            switch hit {
            case _ where shipPosition.x == hit.x && shipPosition.y == hit.y:
                print("–ü–æ–ø–∞–ª x: \(hit.x), y: \(hit.y)")
                
                shipDestroed += 1
                
                // —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ –∫–æ—Ä–æ–±–ª—è
                if shipDestroed == ship.count {
                    print("–£–±–∏–ª \(ship)")
                }
                // —É—Å–ª–æ–≤–∏–µ –≤—ã–≤–æ–¥–∞ –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–æ–º–∞—Ö–∞
                case _ where shipPosition.x != hit.x && shipPosition.y != hit.y:
                    
                    if missShot == 0 {
                        print("\n–ü—Ä–æ–º–∞—Ö x: \(hit.x), y: \(hit.y)\n")
                        
                        missShot += 1
                    }
            default:
                break
            }
        }
    }
}
*/


