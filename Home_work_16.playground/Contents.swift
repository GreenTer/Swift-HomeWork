//
//  main.swift
//  Borovitsky_Socoban
//
//  Created by GreenTer on 6/10/19.
//  Copyright ¬© 2019 BGP. All rights reserved.
//

import Foundation
// –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≥–µ—Ä–æ—è
let WrongTurn = "Wrong way! Please, check your self.."

// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã (—É—Ä–æ–≤–Ω—è) –∏ –≤—Å–µ —á—Ç–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ —Å –Ω–µ–π (—Å—Ç–µ–Ω—ã, —è—â–∏–∫–∏, –≥–µ—Ä–æ–π, –ø–æ–ª–µ: –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
struct Room {
    enum RoomParams: String {
        case Field      = "‚óΩÔ∏è"
        case Wall       = "üß±"
        case Hero       = "üë≤"
        case Box        = "üì¶"
        case CheckPoint = "‚ùóÔ∏è"
    }
    
    // —É—Å–ª–æ–≤–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–≥—Ä—ã
    let byWidth: Int  // —à–∏—Ä–∏–Ω–∞
    let byHeight: Int // –≤—ã—Å–æ—Ç–∞
    
    // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è, —Å–æ –≤—Å–µ–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ (—Å–∞–º–æ –ø–æ–ª–µ, –≥–µ—Ä–æ–π, —è—â–∏–∫–∏, —Å—Ç–µ–Ω—ã)
    mutating func printRoom(hero: Hero, box: [Box], checkPoint: [CheckPoint]) {
        // –º–∞—Å—Å–∏–≤ —Å –º–∞—à—Ç–∞–±–æ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—è ("‚óΩÔ∏è")
        let fieldArray = Array(repeating: (Array(repeating: RoomParams.Field.rawValue, count: byWidth)), count: byHeight)
        
        for (indexHeight, height) in fieldArray.enumerated() {
            var fieldString = ""
            
            for (indexWidth, width) in height.enumerated() {
                
                // —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–æ–ª–µ, —Å–∞–º–æ–≥–æ –≥–µ—Ä–æ—è ("üë≤")
                if hero.heroByWidth - 1 == indexWidth && hero.heroByHeight - 1 == indexHeight {
                    // —É—Å–ª–æ–≤–∏—è –ø–µ—á–∞—Ç–∏ —Å–∞–º–æ–≥–æ –≥–µ—Ä–æ—è –≤ –∫–æ–º–Ω–∞—Ç–µ ("üë≤")
                    fieldString += Room.RoomParams.Hero.rawValue
                    
                } else {
                    var infoBox = 0
                    
                    // —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–æ–ª–µ —è—â–∏–∫–∞ ("üì¶")
                    for each in box {
                        if each.boxByWidth - 1 == indexWidth && each.boxByHeight - 1 == indexHeight {
                            // —É—Å–ª–æ–≤–∏—è –ø–µ—á–∞—Ç–∏ —Å–∞–º–æ–≥–æ —è—â–∏–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ("üì¶")
                            fieldString += Room.RoomParams.Box.rawValue
                            infoBox += 1
                        }
                    }
                    
                    // —É—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –ø–æ–ª–µ —á–µ–∫-–ø–æ–∏–Ω—Ç–∞ ("‚ùóÔ∏è")
                    for each in checkPoint {
                        if each.checkPointByWidth - 1 == indexWidth && each.checkPointByHeight - 1 == indexHeight {
                            // —É—Å–ª–æ–≤–∏—è –ø–µ—á–∞—Ç–∏ —á–µ–∫-–ø–æ–∏–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ("‚ùóÔ∏è")
                            if infoBox == 0 {
                                fieldString += Room.RoomParams.CheckPoint.rawValue
                                infoBox += 1
                            }
                        }
                    }
                    
                    if infoBox == 0 {
                        fieldString += String(width)
                        infoBox = 0
                    }
                }
                
                // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–ª—è
                if fieldString.count == height.count {
                    print(fieldString)
                    fieldString = ""
                }
            }
        }
    }
}


// –∫–ª–∞—Å—Å, —è—â–∏–∫–∞ (–∫–ª–∞—Å—Å, —Ç.–∫. —è—â–∏–∫ –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å - –∏–∑–º–µ–Ω–∏—à—å –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ, –ø–æ–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö)
class Box {
    // —É—Å–ª–æ–≤–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–≥—Ä—ã
    var boxByWidth: Int  // —à–∏—Ä–∏–Ω–∞
    var boxByHeight: Int // –≤—ã—Å–æ—Ç–∞
    
    init(boxByWidth: Int, boxByHeight: Int) {
        self.boxByWidth = boxByWidth
        self.boxByHeight = boxByHeight
    }
}


// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–µ–∫-–ø–æ–∏–Ω—Ç–∞, –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø–æ—Ç–æ–º—É —á—Ç–æ —á–µ–∫-–ø–æ–∏–Ω—Ç —Å—Ç–∞—Ç–∏—á–µ–Ω
struct CheckPoint {
    // —É—Å–ª–æ–≤–∏—è —Å–∞–º–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∏–≥—Ä—ã
    var checkPointByWidth: Int  // —à–∏—Ä–∏–Ω–∞
    var checkPointByHeight: Int // –≤—ã—Å–æ—Ç–∞
}


// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–µ—Ä–æ—è, –∏ –≤—Å–µ —á—Ç–æ –±—É–¥–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ —Å –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
struct Hero {
    // –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –≥–µ—Ä–æ—è (Int –º–∞–ª–æ –ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è!)
    enum Move: Int {
        case Up
        case Down
        case Left
        case Right
    }
    // –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ—Ä–æ—è, –æ—Ç–∫—É–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É
    var heroByWidth: Int  // —à–∏—Ä–∏–Ω–∞
    var heroByHeight: Int // –≤—ã—Å–æ—Ç–∞
    
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ—Ä–æ—è, –Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —è—â–∏–∫–∞
    mutating func moveHero(move: Move, room: Room, box: [Box]) {
        switch move {
        case .Up:
            // —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≥–µ—Ä–æ—è "üë≤"
            if (heroByHeight - 1) > 0 {
                heroByHeight += -1
                
                // —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —è—â–∏–∫–∞ "üì¶"
                for each in box {
                    if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByHeight - 1) > 0 {
                        each.boxByHeight += -1
                        
                    } else if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByHeight - 1) == 0 {
                        heroByHeight += 1
                        print(WrongTurn)
                        break
                    }
                }
                
                print("You move: Up!")
                
            } else {
                print(WrongTurn)
            }
            
        case .Down:
            if (heroByHeight + 1) <= room.byHeight {
                heroByHeight += 1
                
                for each in box {
                    if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByHeight + 1) <= room.byHeight {
                        each.boxByHeight += 1
                        
                    } else if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByHeight + 1) > room.byHeight {
                        heroByHeight += -1
                        print(WrongTurn)
                        break
                    }
                }
                
                print("You move: Down!")
                
            } else {
                print(WrongTurn)
            }
            
        case .Left:
            if (heroByWidth - 1) > 0 && (heroByWidth - 1) <= room.byWidth {
                heroByWidth += -1
                
                for each in box {
                    if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByWidth - 1) > 0 && (each.boxByWidth - 1) <= room.byWidth {
                        each.boxByWidth += -1
                        
                    } else if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByWidth - 1) <= 0 && (each.boxByWidth - 1) <= room.byWidth {
                        heroByWidth += 1
                        print(WrongTurn)
                        break
                    }
                }
                
                print("You move: Left!")
                
            } else {
                print(WrongTurn)
            }
            
        case .Right:
            if (heroByWidth + 1) <= room.byWidth {
                heroByWidth += 1
                
                for each in box {
                    if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByWidth + 1) <= room.byWidth {
                        each.boxByWidth += 1
                        
                    } else if heroByHeight == each.boxByHeight && heroByWidth == each.boxByWidth && (each.boxByWidth + 1) > room.byWidth {
                        heroByWidth += -1
                        print(WrongTurn)
                        break
                    }
                }
                
                print("You move: Right!")
                
            } else {
                print(WrongTurn)
            }
        }
    }
}


// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à
var InfoNextLevel = 0
func checkForWin(box: [Box], checkPoint: [CheckPoint]) {
    var arrBox = [Int]()
    var arrCheckPoint = [Int]()
    
    for each in box {
        arrBox.append(Int(each.boxByWidth))
        arrBox.append(Int(each.boxByHeight))
    }
    
    for each in checkPoint {
        arrCheckPoint.append(Int(each.checkPointByWidth))
        arrCheckPoint.append(Int(each.checkPointByHeight))
    }
    // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –≤ –Ω–∏—Ö
    if Set(arrBox).subtracting(Set(arrCheckPoint)).count == 0 {
        print("Congratulations! You have passed the level!")
        arrBox.removeAll()
        arrCheckPoint.removeAll()
        InfoNextLevel += 1
        
    } else {
        arrBox.removeAll()
        arrCheckPoint.removeAll()
    }
}



////////////////////////////////////////////////////////////////////////////////////
// —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ–π –∏–≥—Ä—ã, —É—Ä–æ–≤–Ω–µ–π –∏ —Ç.–¥.
// level_1
var room = Room(byWidth: 5, byHeight: 5)
var hero = Hero(heroByWidth: 3, heroByHeight: 3)

var box_1 = Box(boxByWidth: 3, boxByHeight: 2)
var box_2 = Box(boxByWidth: 3, boxByHeight: 4)
var boxArray = [box_1, box_2]

var checkPoint_1 = CheckPoint(checkPointByWidth: 1, checkPointByHeight: 1)
var checkPoint_2 = CheckPoint(checkPointByWidth: 5, checkPointByHeight: 5)
var checkPointArray = [checkPoint_1, checkPoint_2]

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
func printRoom() {
    room.printRoom(hero: hero, box: boxArray, checkPoint: checkPointArray)
}

func level_2() {
    room = Room(byWidth: 7, byHeight: 7)
    hero = Hero(heroByWidth: 4, heroByHeight: 4)
    
    box_1 = Box(boxByWidth: 3, boxByHeight: 3)
    box_2 = Box(boxByWidth: 5, boxByHeight: 5)
    boxArray = [box_1, box_2]
    
    checkPoint_1 = CheckPoint(checkPointByWidth: 2, checkPointByHeight: 2)
    checkPoint_2 = CheckPoint(checkPointByWidth: 6, checkPointByHeight: 6)
    checkPointArray = [checkPoint_1, checkPoint_2]
}


// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
func nextLevel() {
    if InfoNextLevel == 1 {
        level_2()
        printRoom()
        InfoNextLevel += 1
        
    } else if InfoNextLevel == 3 {
        print("And you completed all levels!")
        exit(1)
    }
}


// —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–æ–π –∏–≥—Ä—ã
func game() {
    print("Hero can move: D(d) - Right, S(s) - Down, A(a) - Left, W(w) - Up")
    printRoom()
    
    
    for _ in 1...10000 {
        let playerTurn = readLine()?.capitalized
        
        if playerTurn?.count != 0 {
            
            switch playerTurn {
            case "W", "–¶":
                hero.moveHero(move: .Up, room: room, box: boxArray)
                printRoom()
                checkForWin(box: boxArray, checkPoint: checkPointArray)
                nextLevel()
            case "D", "–í":
                hero.moveHero(move: .Right, room: room, box: boxArray)
                printRoom()
                checkForWin(box: boxArray, checkPoint: checkPointArray)
                nextLevel()
            case "A", "–§":
                hero.moveHero(move: .Left, room: room, box: boxArray)
                printRoom()
                checkForWin(box: boxArray, checkPoint: checkPointArray)
                nextLevel()
            case "S", "–´":
                hero.moveHero(move: .Down, room: room, box: boxArray)
                printRoom()
                checkForWin(box: boxArray, checkPoint: checkPointArray)
                nextLevel()
            default:
                game()
            }
            
        } else {
            print(WrongTurn)
        }
    }
}

game()
